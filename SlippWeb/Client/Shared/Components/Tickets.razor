@using System.Text.Json
@using System.Text.Json.Serialization;
@using Slipp.Services.DTO
@using Slipp.Services.Models
@using System.Net
@inject HttpClient Client

@*@inject IHttpClientFactory ClientFactory*@



@*¨/test Består av olika komponenter + html-kod*@


<div class="main-container">
    @if (tickets == null || tickets.Length == 0)
    {
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
    }
    @*<p>Unable to load auctions. Please try again later.</p>*@

    else
    {
        @foreach (var ticket in tickets)
        {
            <TicketCard Ticket=ticket></TicketCard>
        }
    }
</div>


<style>
    .main-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: #3a4553;
        padding-top: 20px;
    }
</style>




@code {
    //Flytta fetchanrop till komponenter eller till egen fil (motsvarande som vi gjorde i poke-uppgiften?) Förmodligen komponenter...
    private CreateTicketOutput[] tickets; //TODO - Gör denna "cascading?", för att inte kontakta APIn inom en visst tidsspan(minska anrop till databasen). 
    //private List<CreateTicketOutput> tickets;
    private bool getAuctionsError;
    private bool shouldRender;  

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000); //Just 4 fun :D
        tickets = await Client.GetFromJsonAsync<CreateTicketOutput[]>("sample-data/tickets.json");
        //var request = new HttpRequestMessage(HttpMethod.Get,
        //   "https://localhost:7197/api/Ticket"); //byt ut till vår url + headers
        //request.Headers.Add("Accept", "application/json");
        ////request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        ////var client = ClientFactory.CreateClient();
        //var client=new HttpClient();

        //var response = await client.SendAsync(request);

        //if (response.IsSuccessStatusCode)
        //{
        //    using var responseStream = await response.Content.ReadAsStreamAsync();
        //    tickets = await JsonSerializer.DeserializeAsync
        //        <List<CreateTicketOutput>>(responseStream);
        //}
        //else
        //{
        //    getAuctionsError = true;
        //}

        shouldRender = true;
    }


}

