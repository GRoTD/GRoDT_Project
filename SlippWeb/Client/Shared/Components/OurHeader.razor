<MudContainer Fixed="true" Style="padding: 0 0 200px 0;">
    <MudPaper Width="100%" Square="true" Class="d-flex flex-column justify-center">

        <MudStack AlignItems="AlignItems.Center" Elevation="0" Square="true" class="pt-2">
            @*LOCATION*@
            
            <MudAutocomplete 
                Style="Width: 200px; font-size: 18px;"
                T="string"
                Variant="Variant.Text"
                Placeholder="Välj plats"
                Clearable="true"
                Margin="Margin.Normal"
                AnchorOrigin="Origin.BottomCenter"
                DisableUnderLine="true"
                @bind-Value="location" 
                SearchFunc="@Search"/>

        </MudStack>

        @*TABS*@
        <MudSwipeArea OnSwipe="@OnSwipe" Style="width: 100%; height: 100px;">

            <MudTabs
                Rounded="false" 
                Centered="true" 
                TabPanelHeaderPosition="TabHeaderPosition.Before" 
                ApplyEffectsToContainer="true"
                DisableRipple="false"
                 TabPanelClass="pa-0 tab-width"
                Style="padding: 0 0 100px 0;"
                ActivePanelIndex="@ActiveTabPanel">

                <MudTabPanel Text="@FirstTabValue">
                    <Tickets></Tickets>
                </MudTabPanel>

                <MudTabPanel Text="Auktioner">
                    <Tickets></Tickets> @*tillfälligt*@
                    <MudLink Href="#"></MudLink>
                </MudTabPanel>

                <MudTabPanel Text="Nattklubbar">
                    <Tickets></Tickets>  @*tillfälligt*@
                    <MudLink Href="#"></MudLink>
                </MudTabPanel>

            </MudTabs>

        </MudSwipeArea>

        </MudPaper>
    </MudContainer>
    
    
<style>
    .tab-width {
        min-width: 120px;
    }

    .mud-input>input.mud-input-root {
        font-size: xx-large;
    }

</style>


@code {

    [Parameter]
    public string FirstTabValue { get; set; }

   private string location;

    private async Task<IEnumerable<string>> Search(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return locations;
        return locations.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private int ActiveTabPanel;

    public void OnSwipe(SwipeDirection d)
    {

        if (d == SwipeDirection.LeftToRight)
        {
            if (ActiveTabPanel == 0)
            {
               return;
            }

            ActiveTabPanel--;
            StateHasChanged();

        }
        else if (d == SwipeDirection.RightToLeft)
        {
            if (ActiveTabPanel == 2)
            {
                return;
            }
            ActiveTabPanel++;
            StateHasChanged();
        }


    }
    

    string[] locations = new string[] //Test data, Remove
    {
        "Göteborg",
        "Stockholm",
        "Lerum",
        "Falun",
        "Mora",
        "Malmö"
    };


}

    
