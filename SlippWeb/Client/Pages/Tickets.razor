@page "/biljetter"
@using System.Text.Json
@using System.Text.Json.Serialization;
@using Slipp.Services.DTO
@using Slipp.Services.Models
@using System.Net
@inject HttpClient Client

@*@inject IHttpClientFactory ClientFactory*@



@*¨/test Består av olika komponenter + html-kod*@

<div class="header">   
    <div class="location-info">
        <h3>Plats <span id="dropdown-arrow">&#129171;</span></h3>
        <p>Adress XX, Göteborg</p>
    </div>
    <div class="header-menu">
        <h3>Auktioner</h3>
        <h3>Biljetter</h3>
        <div class="active-line"></div>
    </div>
</div>

<div class="main-container">
    @if (getAuctionsError)
{
    <p>Unable to load auctions. Please try again later.</p>
}
else
{
    //TODO Byt ut hårkodad data
        @foreach (var ticket in tickets)
        {
           <TicketCard Ticket=ticket></TicketCard> 
        }
}
</div>





@code {
    //Flytta fetchanrop till komponenter eller till egen fil (motsvarande som vi gjorde i poke-uppgiften?) Förmodligen komponenter...
    private CreateTicketOutput[] tickets;
    //private List<CreateTicketOutput> tickets;
    private bool getAuctionsError;
    private bool shouldRender;  

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        tickets = await Client.GetFromJsonAsync<CreateTicketOutput[]>("sample-data/tickets.json");
        //var request = new HttpRequestMessage(HttpMethod.Get,
        //   "https://localhost:7197/api/Ticket"); //byt ut till vår url + headers
        //request.Headers.Add("Accept", "application/json");
        ////request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        ////var client = ClientFactory.CreateClient();
        //var client=new HttpClient();

        //var response = await client.SendAsync(request);

        //if (response.IsSuccessStatusCode)
        //{
        //    using var responseStream = await response.Content.ReadAsStreamAsync();
        //    tickets = await JsonSerializer.DeserializeAsync
        //        <List<CreateTicketOutput>>(responseStream);
        //}
        //else
        //{
        //    getAuctionsError = true;
        //}

        shouldRender = true;
    }


}

